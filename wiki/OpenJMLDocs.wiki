= OpenJML Code Diving =

Interesting places in the code should be marked with a comment containing "*sasp_f2012*" (without quotes of course).

== RAC ==

=== \nonnullelements ===

Files seeming relevant to us, currently in no particular order.
 * JmlRac.java (annotated)
 * JmlAttr.java (annotated)
 * JmlParser.java (annotated)

Further files working with \nonnullelements:
 * BasicBlocker.java (annotated)
 * JmlAssertionAdder.java (annotated)

Declaration of token for \nunnullelements

{{{
[...]
BSNONNULLELEMENTS("\\nonnullelements"),
[...]
}}}

com.sun.tools.javac.parser.JmlTokens.java, l. 144

Search for references to _BSNONNULLELEMENTS_ in the code if you want to look further.

*References to _BSNONNULLEEMENTS_*
 * visitJmlMethodInvocation(JmlMethodInvocation) in JmlAttr.java checks for well-typed annotations, including _BSNONNULLELEMENTS_ (l. 2793).
 * visitJmlMethodInvocation(JmlMethodInvocation) in JmlRac.java calls to translateNonNullArguments() in switch-case of _BSNONNULLELEMENTS_ (l. 1714)
  ** translateNonnullelements(JCMethodInvocation tree) in JmlRac.java (l. 1848)

*See org.jmlspecs.openjml.esc.BasicBlocker, l. 3639 - 3731, esp. l. 3702*
It seems that there are some implementations present, the overall connection is currently not clear to me, though.

Comments indicate that a _\forall_ expression might be required or more elegant. Example:

{{{
//@ requires \nonnullelements o;
}}}

equals

{{{
//@ requires \forall o, i; i < o.length; \nonnull o[i];
}}}

Simply combining both would reduce amount of code needed.



== \nonnullelements in the JML2 refman ==

Quote p. 99 from the pdf version 2011:

    12.4.14 \nonnullelements 
    The syntax of a nonnullelements-expression is as follows. See Section 12.2
    [Specification Expressions], page 90, for the syntax of spec-expression.
    
    nonnullelements-expression ::= \nonnullelements ( spec-expression ) 

    The operator \nonnullelements can be used to assert that an array and its
    elements are all non-null. For example, \nonnullelements(myArray), is
    equivalent to [Leino-Nelson-Saxe00]:

    myArray != null && 
    (\forall int i; 0 <= i && i < myArray.length; 
    myArray[i] != null) 


    





