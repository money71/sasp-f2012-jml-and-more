
@incollection{cok_openjml:_2011,
	series = {Lecture Notes in Computer Science},
	title = {{OpenJML:} {JML} for Java 7 by Extending {OpenJDK}},
	volume = {6617},
	isbn = {978-3-642-20397-8},
	shorttitle = {{OpenJML}},
	url = {http://www.springerlink.com/content/50p463l035ltv072/abstract/},
	abstract = {The Java Modeling Language is a widely used specification language for Java. However, the tool support has not kept pace with advances in the Java language. This paper describes {OpenJML}, an implementation of {JML} tools built by extending the {OpenJDK} Java tool set. {OpenJDK} has a readily extendible architecture, though its details could be revised to further facilitate extension. The result is a suite of {JML} tools for Java 7 that provides static analysis, specification documentation, and runtime checking, an {API} that is used for other tools, uses Eclipse as an {IDE}, and can be extended for further research. In addition, {OpenJML} can leverage the community effort devoted to {OpenJDK.}},
	booktitle = {{NASA} Formal Methods},
	publisher = {Springer Berlin / Heidelberg},
	author = {Cok, David},
	editor = {Bobaru, Mihaela and Havelund, Klaus and Holzmann, Gerard and Joshi, Rajeev},
	year = {2011},
	keywords = {Computer Science},
	pages = {472--479}
},

@misc{cok_openjml_2011,
	title = {The {OpenJML} User Guide {DRAFT} {IN} {PROGRESS}},
	url = {http://jmlspecs.sourceforge.net/OpenJMLUserGuide.pdf},
	publisher = {{GrammaTech}, Inc.},
	author = {Cok, David R.},
	year = {2011}
},

@article{burdy_overview_2005,
	title = {An overview of {JML} tools and applications},
	volume = {7},
	issn = {1433-2779},
	url = {http://www.springerlink.com/content/t6qp52glycr4jx68/abstract/},
	doi = {10.1007/s10009-004-0167-4},
	abstract = {The Java Modeling Language {(JML)} can be used to specify the detailed design of Java classes and interfaces by adding annotations to Java source files. The aim of {JML} is to provide a specification language that is easy to use for Java programmers and that is supported by a wide range of tools for specification typechecking, runtime debugging, static analysis, and verification.},
	number = {3},
	journal = {International Journal on Software Tools for Technology Transfer {(STTT)}},
	author = {Burdy, Lilian and Cheon, Yoonsik and Cok, David R. and Ernst, Michael D. and Kiniry, Joseph R. and Leavens, Gary T. and Leino, K. Rustan M. and Poll, Erik},
	year = {2005},
	keywords = {Computer Science},
	pages = {212--232}
},

@incollection{chalin_beyond_2006,
	series = {Lecture Notes in Computer Science},
	title = {Beyond Assertions: Advanced Specification and Verification with {JML} and {ESC/Java2}},
	volume = {4111},
	isbn = {978-3-540-36749-9},
	shorttitle = {Beyond Assertions},
	url = {http://www.springerlink.com/content/v5125m8010411665/abstract/},
	booktitle = {Formal Methods for Components and Objects},
	publisher = {Springer Berlin / Heidelberg},
	author = {Chalin, Patrice and Kiniry, Joseph and Leavens, Gary and Poll, Erik},
	editor = {de Boer, Frank and Bonsangue, Marcello and Graf, Susanne and de Roever, {Willem-Paul}},
	year = {2006},
	keywords = {Computer Science},
	pages = {342--363}
},

@inproceedings{cheon_runtime_2002,
	title = {A runtime assertion checker for the Java Modeling Language {(JML)}},
	url = {http://archives.cs.iastate.edu/documents/disk0/00/00/02/74/00000274-00/jmlrac.pdf},
	booktitle = {Proceedings of the International Conference on Software Engineering Research and Practice {(SERP’02)}, Las Vegas, Nevada, {USA}},
	author = {Cheon, Y. and Leavens, G. T},
	year = {2002},
	pages = {322–328}
},

@incollection{zimmerman_jmlunit:_2011,
	series = {Lecture Notes in Computer Science},
	title = {{JMLUnit:} The Next Generation},
	volume = {6528},
	isbn = {978-3-642-18069-9},
	shorttitle = {{JMLUnit}},
	url = {http://www.springerlink.com/content/9t4r84636062l355/abstract/},
	abstract = {Designing unit test suites for object-oriented systems is a painstaking, repetitive, and error-prone task, and significant research has been devoted to the automatic generation of test suites. One method for generating unit tests is to use formal class and method specifications as test oracles and automatically run them with developer-provided data values; for Java code with formal specifications written in the Java Modeling Language, this method is embodied in the {JMLUnit} tool and the {JUnit} testing framework on which it is based. While {JMLUnit} can provide reasonable test coverage when used by a skilled developer, it suffers from several shortcomings including excessive memory utilization during testing and the need to manually write significant amounts of code to generate non-primitive test data objects. In this paper we describe {JMLUnitNG}, a {TestNG-based} successor to {JMLUnit} that can automatically generate and execute millions of tests, using supplied test data of only primitive types, without consuming excessive amounts of memory. We also present a comparison of test coverage between {JMLUnitNG} and the original {JMLUnit.}},
	booktitle = {Formal Verification of {Object-Oriented} Software},
	publisher = {Springer Berlin / Heidelberg},
	author = {Zimmerman, Daniel and Nagmoti, Rinkesh},
	editor = {Beckert, Bernhard and Marché, Claude},
	year = {2011},
	keywords = {Computer Science},
	pages = {183--197}
},

@incollection{charles_integer_2009,
	series = {Lecture Notes in Computer Science},
	title = {Integer Polyhedra for Program Analysis},
	volume = {5564},
	isbn = {978-3-642-02157-2},
	url = {http://www.springerlink.com/content/a02471013pmj0452/abstract/},
	abstract = {Polyhedra are widely used in model checking and abstract interpretation. Polyhedral analysis is effective when the relationships between variables are linear, but suffers from imprecision when it is necessary to take into account the integrality of the represented space. Imprecision also arises when non-linear constraints occur. Moreover, in terms of tractability, even a space defined by linear constraints can become unmanageable owing to the excessive number of inequalities. Thus it is useful to identify those inequalities whose omission has least impact on the represented space. This paper shows how these issues can be addressed in a novel way by growing the integer hull of the space and approximating the number of integral points within a bounded polyhedron.},
	booktitle = {Algorithmic Aspects in Information and Management},
	publisher = {Springer Berlin / Heidelberg},
	author = {Charles, Philip and Howe, Jacob and King, Andy},
	editor = {Goldberg, Andrew and Zhou, Yunhong},
	year = {2009},
	keywords = {Computer Science},
	pages = {85--99}
}