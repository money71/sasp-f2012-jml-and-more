= Report_appendix_hoto_setupcode_and_run_it =


== Setup OpenJML project Eclipse project ==

Based upon http://sourceforge.net/apps/trac/jmlspecs/wiki/OpenJmlSetup 

Works for us at OSX 10.6.8 and Ubuntu 12.4.

=== Pre requirements ===
- Java 7  


=== Setup trunk / branches ===

Create a standalone folder/workspace for the code:

{{{

    $ cat open_jml_trunk_sourcecode/svn_update.sh 
    #!/bin/sh

    svn co https://jmlspecs.svn.sourceforge.net/svnroot/jmlspecs/JMLAnnotations/trunk JMLAnnotations
    svn co https://jmlspecs.svn.sourceforge.net/svnroot/jmlspecs/OpenJML/trunk/OpenJDK OpenJDK
    svn co https://jmlspecs.svn.sourceforge.net/svnroot/jmlspecs/OpenJML/trunk/OpenJML OpenJML
    svn co https://jmlspecs.svn.sourceforge.net/svnroot/jmlspecs/OpenJML/trunk/OpenJML-UpdateSite OpenJML-UpdateSite
    svn co https://jmlspecs.svn.sourceforge.net/svnroot/jmlspecs/OpenJML/trunk/OpenJMLFeature OpenJMLFeature
    svn co https://jmlspecs.svn.sourceforge.net/svnroot/jmlspecs/OpenJML/trunk/OpenJMLUI OpenJMLUI
    svn co https://jmlspecs.svn.sourceforge.net/svnroot/jmlspecs/Specs/trunk Specs
    svn co https://jmlspecs.svn.sourceforge.net/svnroot/jmlspecs/OpenJML/vendor vendor

}}}

Create a separate Eclipse workspace which contains no code:

{{{

    $ ls -a open_jml_trunk_workspace
    .  ..  .metadata

}}}

Get a *fresh* Eclipse SDK (both 32/64 bit 3.7.2 worked for us).

Start that eclipse using the *empty* workspace.

Then import as Eclipse existing projects (without copying):
- JMLAnnotations
- OpenJDK
- OpenJML
- OpenJML-UpdateSite
- OpenJMLFeature
- OpenJMLUI
- Specs

Then at least clean projects and build.

Turn off auto build since it otherwise will build projects each time saving-actions are done.

==== Trouble shooting on import ====

Turn on show all *.* resources under the *filters* e.g. add exception
for *.svn which we don't wanna see.

We experienced an import error on a non existing src folder:

https://sasp-f2012-jml-and-more.googlecode.com/svn/wiki/images/OpenJMLImportError.png

Clean and build project again then it raises error:

    Project 'OpenJML' is missing required Java project: 'Specs'

Simply import Specs again and clean rebuild all projects at the same
time again.

And now no errors in the log *only* a bunch of warnings.

== Setup OpenJMLExtended Eclipse project ==

Check out the code from svn (public repository):

{{{
    svn co https://sasp-f2012-jml-and-more.googlecode.com/svn/OpenJMLExtended/tags/final_handin OpenJMLExtended
}}}


Then import OpenJMLExtended as Eclipse existing projects (here copying can safely be done).


== Run OpenJMLExtended Eclipse project  ==

Open the Eclipse with a workspace installed in the above way. It should look as follow:

https://sasp-f2012-jml-and-more.googlecode.com/svn/wiki/images/OpenJMLExtendedEclipseProject.png

Run one of the launch configurations for example TestAllOpenJMLExtended.launch which executes all the JUnit tests within the OpenJMLExtended Eclipse project.




