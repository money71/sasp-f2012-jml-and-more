#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass scrartcl
\begin_preamble
\usepackage{listings}
\usepackage{color}
 
\definecolor{dkgreen}{rgb}{0,0.6,0}
\definecolor{gray}{rgb}{0.5,0.5,0.5}
\definecolor{mauve}{rgb}{0.58,0,0.82}
 
\lstset{ %
  language=Java,                % the language of the code
  basicstyle=\footnotesize,           % the size of the fonts that are used for the code
  numbers=left,                   % where to put the line-numbers
  numberstyle=\tiny\color{gray},  % the style that is used for the line-numbers
  stepnumber=1,                   % the step between two line-numbers. If it's 1, each line 
                                  % will be numbered
  numbersep=5pt,                  % how far the line-numbers are from the code
  backgroundcolor=\color{white},      % choose the background color. You must add \usepackage{color}
  showspaces=false,               % show spaces adding particular underscores
  showstringspaces=false,         % underline spaces within strings
  showtabs=false,                 % show tabs within strings adding particular underscores
  frame=none,                   % adds a frame around the code
  rulecolor=\color{black},        % if not set, the frame-color may be changed on line-breaks within not-black text (e.g. commens (green here))
  tabsize=2,                      % sets default tabsize to 2 spaces
  captionpos=b,                   % sets the caption-position to bottom
  breaklines=true,                % sets automatic line breaking
  breakatwhitespace=false,        % sets if automatic breaks should only happen at whitespace
 % title=\lstname,                   % show the filename of files included with \lstinputlisting;
                                  % also try caption instead of title
  keywordstyle=\color{blue},          % keyword style
  commentstyle=\color{dkgreen},       % comment style
  stringstyle=\color{mauve},         % string literal style
  escapeinside={\%*}{*)},            % if you want to add a comment within your code
  morekeywords={*,...}               % if you want to add more keywords to the set
}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman times
\font_sans helvet
\font_typewriter courier
\font_default_family rmdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_title "Implementing Quantified Expressions for OpenJML"
\pdf_author "Pelle Krøgholt, Florian Biermann"
\pdf_subject "SASP Project Spring 2012"
\pdf_keywords "JML, OpenJML, Quantified Expression, Pattern Matching"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine natbib_authoryear
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Subject
SASP Project Report 2012
\end_layout

\begin_layout Title
Implementing Quantified Expressions for OpenJML
\end_layout

\begin_layout Subtitle
A Pattern Matching Approach
\end_layout

\begin_layout Author
Pelle Krøgholt
\begin_inset Foot
status open

\begin_layout Plain Layout
pelle@itu.dk
\end_layout

\end_inset


\begin_inset space \qquad{}
\end_inset

Florian Biermann
\begin_inset Foot
status open

\begin_layout Plain Layout
fbie@itu.dk
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Abstract
<Write abstract..>
\end_layout

\begin_layout Abstract
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
This project report for the course Advanced Models and Program in spring
 2012 documents our efforts to extend the OpenJML
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "http://jmlspecs.sourceforge.net/"

\end_inset


\end_layout

\end_inset

 framework.
 Our project focuses on implementing quantified statements into the runtime
 assertion checker of OpenJML.
\end_layout

\begin_layout Subsection
An Overview of OpenJML
\end_layout

\begin_layout Standard
OpenJML is a tool to verify the correctness of Java 7 code by specifying
 the behavior of classes and methods using mathematical models 
\begin_inset CommandInset citation
LatexCommand citep
key "cok_openjml:_2011,cok_openjml_2011"

\end_inset

.
 It is built on top of the OpenJDK
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "http://www.openjdk.org"

\end_inset


\end_layout

\end_inset

 compiler and has a Java-like syntax (the JML syntax) to add pre- and post-condi
tions to source code as well as invariants.
 These conditions are written by the developer in comments throughout the
 sources or in a separate file.
 The tool then comes with three different variants to check the correctness
 of source code specifications:
\end_layout

\begin_layout Itemize
Static analysis
\end_layout

\begin_layout Itemize
Extended static analysis (ESC)
\end_layout

\begin_layout Itemize
Runtime assertion checker (RAC)
\end_layout

\begin_layout Standard
While the static analysis only checks the correctness of the JML statements,
 the ESC is able to verify the correctness of the program's behavior to
 a certain extend by implying automated like Yices or interactive provers
 like Coq 
\begin_inset CommandInset citation
LatexCommand citep
key "cok_openjml:_2011,burdy_overview_2005,chalin_beyond_2006"

\end_inset

.
\end_layout

\begin_layout Standard
The RAC compiles the JML specifications in to the binary code and checks
 that invariants and pre- and post-conditions hold during executing the
 program.
 Because the OpenJDK compiler is part of OpenJML, the AST generated during
 compile-time can be altered directly so that actual assertions will be
 executed before and after each call of a method.
 Using additional tools, it is possible to generate test-suites for the
 RAC-compiled Java binaries to quickly get huge coverage of unit testing
 
\begin_inset CommandInset citation
LatexCommand citep
key "cheon_runtime_2002,zimmerman_jmlunit:_2011"

\end_inset

.
\end_layout

\begin_layout Subsection
Overview of the Report
\end_layout

\begin_layout Standard
In this project, we have investigated and implemented a solution for evaluating
 quantified statements over integers.
 In the current OpenJML trunk version
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "http://sourceforge.net/apps/trac/jmlspecs/log/OpenJML/trunk/"

\end_inset

, Revision 2543
\end_layout

\end_inset

, quantified statements can only be evaluated for one race variable.
 As the ESC of OpenJML is currently being overhauled entirely, we focused
 on developing a solution for the OpenJML RAC.
\end_layout

\begin_layout Standard
In the following report, we will outline the problem further and give examples
 of currently not evaluated quantified statements.
 For brevity, we will focus only on the implementation of the 
\emph on
for all
\emph default
 expression.
 Next we will describe a number of possible solutions, starting with the
 most naive approach, and explain our design decisions in the solution.
 We will then explain our solution in detail, followed by a section to outline
 future work on our proposed solution
\end_layout

\begin_layout Section
Problem Outline
\end_layout

\begin_layout Standard
In this section we will outline the current state of the implementation
 of quantified expressions in OpenJML RAC
\begin_inset Note Note
status open

\begin_layout Plain Layout
 [6]
\end_layout

\end_inset

.
 Further we will elaborate on the problem by giving an example of a naive
 approach towards solving the evaluation of range expressions and point
 to more cases where the execution of a quantified expression is difficult.
 
\end_layout

\begin_layout Standard
For brevity and to get a deeper understanding of the underlying implications
 and problems, we have focused on the 
\emph on

\backslash
forall
\emph default
 statement over integers during the project.
 Since all quantified expressions can be evaluated using the same technique
 just with a minor alteration, it will be possible to apply our results
 to general quantifiers in OpenJML.
\end_layout

\begin_layout Subsection
Current Implementation of Quantifiers in OpenJML
\end_layout

\begin_layout Standard
As of revision [rev] in the OpenJML trunk, the following statement will
 be compiled into RAC binary code:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

//@ requires (
\backslash
forall int i; 0 <= i && i <= 10; p(i));
\end_layout

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $p(i)$
\end_inset

 is a predicate that should hold for all 
\begin_inset Formula $i$
\end_inset

.
 A more general form is:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

//@ requires (
\backslash
forall i; R; P); 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $R$
\end_inset

 is a boolean expression that defines a range and 
\begin_inset Formula $P$
\end_inset

 a boolean expression that defines the predicate which should hold for all
 
\begin_inset Formula $i$
\end_inset

.
 The notation is similar to the set-builder notation, where the values inside
 of a set are denoted through a boolean expression:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
i\in N|0\leq i\wedge i\leq10
\]

\end_inset


\end_layout

\begin_layout Standard
The OpenJML RAC will compile a check into the method decorated with the
 above JML statement that runs a 
\emph on
for-loop
\emph default
 for each 
\begin_inset Formula $i$
\end_inset

 for which the given 
\begin_inset Formula $P$
\end_inset

 is asserted.
 If the check runs over an 
\begin_inset Formula $i$
\end_inset

 for which 
\begin_inset Formula $P$
\end_inset

 does not hold, an Exception is thrown, notifying the user about the violation
 of the condition.
\end_layout

\begin_layout Standard
However, conditions in JML that use the 
\emph on

\backslash
forall
\emph default
 statement are likely to become more elaborate.
 For example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

//@ requires (
\backslash
forall int i, j; (100 >= i && i > 0 || i == 200) && (-100 < j && 100 > j);
 p(i) && q(j));
\end_layout

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $p(i)$
\end_inset

 and 
\begin_inset Formula $q(j)$
\end_inset

 are predicates that must hold for all 
\begin_inset Formula $i$
\end_inset

 and 
\begin_inset Formula $j$
\end_inset

.
 Here, we have multiple new issues:
\end_layout

\begin_layout Itemize
There is more than one race variable declared in the expression.
\end_layout

\begin_layout Itemize
The order of the boolean range description is entirely arbitrary.
\end_layout

\begin_layout Itemize
\begin_inset Formula $i$
\end_inset

 can not only be inside a single well defined range but additionally become
 a value outside of 
\begin_inset Formula $[1,100]$
\end_inset

.
\end_layout

\begin_layout Standard
An expression like given in this example will currently (as of trunk revision
 2543) not be executed when compiled into RAC in OpenJML.
 This is mostly due to the declaration of two race variables.
 However, OpenJML RAC relies on a heuristic to identify the set of values
 which 
\begin_inset Formula $i$
\end_inset

 and 
\begin_inset Formula $j$
\end_inset

 can take and therefore highly relies on the layout of the expression.
\end_layout

\begin_layout Subsection
The Naive Approach
\end_layout

\begin_layout Subsection
Further Difficulties
\end_layout

\begin_layout Section
Implementation
\end_layout

\begin_layout Subsection
QRange - Implementation of a Pattern Matcher
\end_layout

\begin_layout Subsubsection
Rigorous Pattern Matching
\end_layout

\begin_layout Subsubsection
Code Generation
\end_layout

\begin_layout Subsection
IntervalSet - Binary Tree Representing Set Operations
\end_layout

\begin_layout Subsection
ForAll - Generating For-Loops for Multiple Race Variables
\end_layout

\begin_layout Subsection
JML Specifications
\end_layout

\begin_layout Subsection
Testing
\end_layout

\begin_layout Section
Outstanding Issues and Future Work
\end_layout

\begin_layout Subsection
Pattern Matching
\end_layout

\begin_layout Subsection
Interval Representation
\end_layout

\begin_layout Subsection
Loop Generation
\end_layout

\begin_layout Subsection
Validation
\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
btprint "btPrintAll"
bibfiles "sasp"
options "abbrvnat"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
\start_of_appendix
Instructions on How to Execute the Code
\end_layout

\begin_layout Section
ForAll.java
\begin_inset CommandInset label
LatexCommand label
name "sec:ForAll.java"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
lstinputlisting{../OpenJMLExtended/tags/final_handin/src/dk/itu/openjml/quantifier
s/ForAll.java}
\end_layout

\end_inset


\end_layout

\begin_layout Section
QRange.java
\begin_inset CommandInset label
LatexCommand label
name "sec:QRange.java"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
lstinputlisting{../OpenJMLExtended/tags/final_handin/src/dk/itu/openjml/quantifier
s/QRange.java}
\end_layout

\end_inset


\end_layout

\begin_layout Section
IntervalSet.java
\begin_inset CommandInset label
LatexCommand label
name "sec:IntervalSet.java"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
lstinputlisting{../OpenJMLExtended/tags/final_handin/src/dk/itu/openjml/quantifier
s/IntervalSet.java}
\end_layout

\end_inset


\end_layout

\begin_layout Section
JUnit Tests
\begin_inset CommandInset label
LatexCommand label
name "sec:JUnit-Tests"

\end_inset


\end_layout

\begin_layout Subsection
Test_ForAll.java
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
lstinputlisting{../OpenJMLExtended/tags/final_handin/tests/dk/itu/openjml/quantifi
ers/Test_ForAll.java}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Test_QRange.java
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
lstinputlisting{../OpenJMLExtended/tags/final_handin/tests/dk/itu/openjml/quantifi
ers/Test_QRange.java}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Test_IntervalSet.java
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
lstinputlisting{../OpenJMLExtended/tags/final_handin/tests/dk/itu/openjml/quantifi
ers/Test_IntervalSet.java}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
TestAll.java
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
lstinputlisting{../OpenJMLExtended/tags/final_handin/tests/dk/itu/openjml/quantifi
ers/TestAll.java}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Test_ForAllCompiledForRAC.java
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
lstinputlisting{../OpenJMLExtended/tags/final_handin/tests/dk/itu/openjml/quantifi
ers/Test_ForAllCompiledForRAC.java}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Weblinks
\end_layout

\begin_layout Itemize
Google Code SVN 
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
target "https://sasp-f2012-jml-and-more.googlecode.com/svn/OpenJMLExtended/tags/final_handin"

\end_inset


\end_layout

\end_deeper
\end_body
\end_document
